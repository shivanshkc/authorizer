name: Deploy
description: Deploys the project.

inputs:
  service-account-key:
    description: |
      JSON formatted key for the service account.
      This can be obtained from the GCP console IAM page.
    required: true
  region:
    description: |
      Region for the deployment.
    required: true
  repository:
    description: |
      Name of the repository (GCP Artifacts Registry) where the docker image is present.
    required: true
  service_name:
    description: |
      Name of the service that will be displayed in Cloud Run.
    required: true
  allow-public-access:
    description: |
      Whether to allow public access to the service.
    required: false
    default: 'true'
  memory:
    description: |
      Memory allocation for the service.
    required: false
    default: '128Mi'
  max-instances:
    description: |
      Maximum number of instances.
    required: false
    default: '1'

outputs:
  url:
    description: 'The URL of the deployed Cloud Run service'
    value: ${{ steps.deploy.outputs.url }}

runs:
  using: composite
  steps:
    # Authenticate with Google Cloud.
    - name: Authenticate with Google Cloud.
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.service-account-key }}

    # Set up Google Cloud CLI.
    - name: Set up Google Cloud CLI.
      uses: google-github-actions/setup-gcloud@v2

    # Configure docker with credentials.
    - name: Configure docker with credentials.
      run: gcloud auth configure-docker ${{ inputs.region }}-docker.pkg.dev
      shell: bash

    # Build the docker image.
    - name: Build the docker image.
      run: docker build -f Containerfile -t ${{ inputs.service_name }}:${{ github.sha }} .
      shell: bash

    # Push the docker image.
    - name: Push the docker image.
      run: |
        set -euo pipefail

        IMAGE_URL="${{ inputs.region }}-docker.pkg.dev/${{ fromJson(inputs.service-account-key).project_id }}/${{ inputs.repository }}/${{ inputs.service_name }}:${{ github.sha }}"

        docker tag ${{ inputs.service_name }}:${{ github.sha }} "$IMAGE_URL"
        docker push "$IMAGE_URL"
      shell: bash

    # Deploy to cloud run using official action.
    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ inputs.service_name }}
        region: ${{ inputs.region }}
        image: ${{ inputs.region }}-docker.pkg.dev/${{ fromJson(inputs.service-account-key).project_id }}/${{ inputs.repository }}/${{ inputs.service_name }}:${{ github.sha }}
        flags: |
          --concurrency=80
          --min-instances=0
          --max-instances=${{ inputs.max-instances }}
          --memory=${{ inputs.memory }}
          --port=8080
          --service-account=${{ fromJson(inputs.service-account-key).client_email }}
          --set-secrets=/etc/${{ inputs.service_name }}/configs.yaml=${{ inputs.service }}-configs:latest \
          --timeout=600
          --cpu-throttling

    # Allow public access if requested.
    - name: Allow public access
      if: ${{ inputs.allow-public-access == 'true' }}
      run: |
        set -euo pipefail

        gcloud run services add-iam-policy-binding ${{ inputs.service_name }} \
          --region=${{ inputs.region }} \
          --member=allUsers \
          --role=roles/run.invoker
      shell: bash
